import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from filters.filters import IsAdmin
from keyboards.keyboards import kb_admin, kb_back, kb_for_wait_amount, kb_game
from lexicon.lexicon_ru import LexiconRu
from states.states import FSMAdminPanel
from utils.utils import MessageProcessor

admin_router = Router()
admin_router.message.filter(IsAdmin())

logger_admin = logging.getLogger(__name__)


@admin_router.message(F.text == '/admin')
async def cmd_admin(msg: Message, state: FSMContext):
    await msg.delete()
    await msg.answer('<code>üíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üíª</code>', reply_markup=kb_admin)
    await state.set_state(FSMAdminPanel.admin_menu)

@admin_router.message(F.text == '/reboot')
async def cmd_reboot(msg: Message, state: FSMContext):
    logger_admin.debug(f'Entry')

    await msg.answer(LexiconRu.await_amount, reply_markup=kb_for_wait_amount)
    await state.set_state(state=None)

    logger_admin.debug(f'Exit')

@admin_router.callback_query(F.data == 'temp')
async def clbk_temp(clbk: CallbackQuery, state: FSMContext):
    # await clbk.message.edit_text('–°–ª–æ–≤–æ –¥–Ω—è –∑–∞–≥–∞–¥–∞–Ω–æ!\n'
    #                              '–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å:\n‚ûñ  ‚ûñ  ‚ûñ  ‚ûñ  ‚ûñ \n'
    #                              '–ü–û–ü–´–¢–ö–ò ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è', reply_markup=kb_game)
    await flush_redis_db()

@admin_router.callback_query(F.data == 'exit')
async def cmd_exit(clbk: CallbackQuery, state: FSMContext):
    await state.set_state(state=None)
    await clbk.message.edit_text(f'–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏‚úÖ',
                                 reply_markup=kb_for_wait_amount)
    await clbk.answer()


@admin_router.message(FSMAdminPanel.admin_menu)
async def invalid_msg(msg: Message):
    await msg.delete()


@admin_router.callback_query(F.data == 'newsletter', FSMAdminPanel.admin_menu)
async def cmd_newsletter(clbk: CallbackQuery, state: FSMContext):
    await clbk.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ü–æc–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ '
                                 '—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç—É, –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ '
                                 '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!', reply_markup=kb_back)
    await state.set_state(FSMAdminPanel.newsletter)
    await clbk.answer()


@admin_router.callback_query(F.data == 'back', FSMAdminPanel.newsletter)
async def clbk_back(clbk: CallbackQuery, state: FSMContext):
    await clbk.message.edit_text('<code>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</code>',
                                 reply_markup=kb_admin)
    await state.set_state(FSMAdminPanel.admin_menu)


@admin_router.message(FSMAdminPanel.newsletter)
async def sent_text(msg: Message, state: FSMContext):
    await MessageProcessor(msg, state).broadcast(text=msg.text)
    await msg.answer('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞‚úÖ', reply_markup=kb_admin)
    await state.set_state(FSMAdminPanel.admin_menu)
